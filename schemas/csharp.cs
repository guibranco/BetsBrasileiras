// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var bet = Bet.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Schema to validate bets.
    /// </summary>
    public partial class Bet
    {
        /// <summary>
        /// The brand name associated with the requirement.
        /// </summary>
        [JsonProperty("brand")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public string Brand { get; set; }

        /// <summary>
        /// The CNPJ document number of the company.
        /// </summary>
        [JsonProperty("document")]
        public string Document { get; set; }

        /// <summary>
        /// The domain name associated with the brand.
        /// </summary>
        [JsonProperty("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// The legal name of the company.
        /// </summary>
        [JsonProperty("fiscal_name")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public string FiscalName { get; set; }

        /// <summary>
        /// The requirement identifier in the format 'NNNN/YYYY'.
        /// </summary>
        [JsonProperty("requirement_number_year")]
        public string RequirementNumberYear { get; set; }
    }

    public partial class Bet
    {
        public static Bet[] FromJson(string json) => JsonConvert.DeserializeObject<Bet[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Bet[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length >= 1)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length >= 1)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }
}
